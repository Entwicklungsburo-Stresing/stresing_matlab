function [methodinfo,structs,enuminfo,ThunkLibName]=ESLSCDLL_prototype
%ESLSCDLL_PROTOTYPE Create structures to define interfaces found in 'ESLSCDLL'.

%This function was generated by loadlibrary.m parser version  on Thu Nov 21 11:20:27 2024
%perl options:'ESLSCDLL.i -outfile=ESLSCDLL_prototype.m -thunkfile=ESLSCDLL_thunk_pcwin64.c -header=ESLSCDLL.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'ESLSCDLL_thunk_pcwin64');
%  es_status_codes DLLInitDriver ( uint8_t * _number_of_boards ); 
fcns.thunkname{fcnNum}='es_status_codesvoidPtrThunk';fcns.name{fcnNum}='DLLInitDriver'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLInitBoard (); 
fcns.thunkname{fcnNum}='es_status_codesThunk';fcns.name{fcnNum}='DLLInitBoard'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  void DLLInitSettingsStruct ( struct measurement_settings * ms ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DLLInitSettingsStruct'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'measurement_settingsPtr'};fcnNum=fcnNum+1;
%  es_status_codes DLLSetGlobalSettings ( struct measurement_settings settings ); 
fcns.thunkname{fcnNum}='es_status_codesstructmeasurement_settingsThunk';fcns.name{fcnNum}='DLLSetGlobalSettings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'measurement_settings'};fcnNum=fcnNum+1;
%  es_status_codes DLLSetGlobalSettings_matlab ( struct measurement_settings_matlab measurement_s , struct camera_settings camera_s0 , struct camera_settings camera_s1 , struct camera_settings camera_s2 , struct camera_settings camera_s3 , struct camera_settings camera_s4 ); 
fcns.thunkname{fcnNum}='es_status_codesstructmeasurement_settings_matlabstructcamera_settingsstructcamera_settingsstructcamera_settingsstructcamera_settingsstructcamera_settingsThunk';fcns.name{fcnNum}='DLLSetGlobalSettings_matlab'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'measurement_settings_matlab', 'camera_settings', 'camera_settings', 'camera_settings', 'camera_settings', 'camera_settings'};fcnNum=fcnNum+1;
%  es_status_codes DLLInitMeasurement (); 
fcns.thunkname{fcnNum}='es_status_codesThunk';fcns.name{fcnNum}='DLLInitMeasurement'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  es_status_codes DLLStartMeasurement_blocking (); 
fcns.thunkname{fcnNum}='es_status_codesThunk';fcns.name{fcnNum}='DLLStartMeasurement_blocking'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  void DLLStartMeasurement_nonblocking (); 
fcns.thunkname{fcnNum}='voidThunk';fcns.name{fcnNum}='DLLStartMeasurement_nonblocking'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  es_status_codes DLLAbortMeasurement (); 
fcns.thunkname{fcnNum}='es_status_codesThunk';fcns.name{fcnNum}='DLLAbortMeasurement'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  es_status_codes DLLCopyOneSample ( uint32_t drvno , uint32_t sample , uint32_t block , uint16_t camera , uint16_t * pdest ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint32uint32uint16voidPtrThunk';fcns.name{fcnNum}='DLLCopyOneSample'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'uint16', 'uint16Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLCopyOneSample_multipleBoards ( uint32_t sample , uint32_t block , uint16_t camera , uint16_t * pdest0 , uint16_t * pdest1 , uint16_t * pdest2 , uint16_t * pdest3 , uint16_t * pdest4 ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint32uint16voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLCopyOneSample_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint16', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLCopyOneBlock ( uint32_t drvno , uint16_t block , uint16_t * pdest ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint16voidPtrThunk';fcns.name{fcnNum}='DLLCopyOneBlock'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint16', 'uint16Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLCopyOneBlock_multipleBoards ( uint16_t block , uint16_t * pdest0 , uint16_t * pdest1 , uint16_t * pdest2 , uint16_t * pdest3 , uint16_t * pdest4 ); 
fcns.thunkname{fcnNum}='es_status_codesuint16voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLCopyOneBlock_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint16', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLCopyAllData ( uint32_t drvno , uint16_t * pdest ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtrThunk';fcns.name{fcnNum}='DLLCopyAllData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint16Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLCopyAllData_multipleBoards ( uint16_t * pdest0 , uint16_t * pdest1 , uint16_t * pdest2 , uint16_t * pdest3 , uint16_t * pdest4 ); 
fcns.thunkname{fcnNum}='es_status_codesvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLCopyAllData_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLCopyDataArbitrary ( uint32_t drvno , uint32_t sample , uint32_t block , uint16_t camera , uint32_t pixel , uint32_t length_in_pixel , uint16_t * pdest ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint32uint32uint16uint32uint32voidPtrThunk';fcns.name{fcnNum}='DLLCopyDataArbitrary'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'uint16', 'uint32', 'uint32', 'uint16Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetOneSamplePointer ( uint32_t drvno , uint32_t sample , uint32_t block , uint16_t camera , uint16_t ** pdest , size_t * bytes_to_end_of_buffer ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint32uint32uint16voidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLGetOneSamplePointer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'uint16', 'uint16PtrPtr', 'uint64Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetOneBlockPointer ( uint32_t drvno , uint32_t block , uint16_t ** pdest , size_t * bytes_to_end_of_buffer ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLGetOneBlockPointer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint16PtrPtr', 'uint64Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetAllDataPointer ( uint32_t drvno , uint16_t ** pdest , size_t * bytes_to_end_of_buffer ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLGetAllDataPointer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint16PtrPtr', 'uint64Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetPixelPointer ( uint32_t drvno , uint16_t pixel , uint32_t sample , uint32_t block , uint16_t camera , uint16_t ** pdest , size_t * bytes_to_end_of_buffer ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint16uint32uint32uint16voidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLGetPixelPointer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint16', 'uint32', 'uint32', 'uint16', 'uint16PtrPtr', 'uint64Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLExitDriver (); 
fcns.thunkname{fcnNum}='es_status_codesThunk';fcns.name{fcnNum}='DLLExitDriver'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  void DLLFreeMemInfo ( uint64_t * pmemory_all , uint64_t * pmemory_free ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLFreeMemInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint64Ptr', 'uint64Ptr'};fcnNum=fcnNum+1;
%  int DLLGetProcessCount (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='DLLGetProcessCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int DLLGetThreadCount (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='DLLGetThreadCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  double DLLCalcRamUsageInMB ( uint32_t nos , uint32_t nob ); 
fcns.thunkname{fcnNum}='doubleuint32uint32Thunk';fcns.name{fcnNum}='DLLCalcRamUsageInMB'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'uint32', 'uint32'};fcnNum=fcnNum+1;
%  double DLLCalcMeasureTimeInSeconds ( uint32_t nos , uint32_t nob , double exposure_time_in_ms ); 
fcns.thunkname{fcnNum}='doubleuint32uint32doubleThunk';fcns.name{fcnNum}='DLLCalcMeasureTimeInSeconds'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'double'};fcnNum=fcnNum+1;
%  void DLLSetContinuousMeasurement ( uint8_t on ); 
fcns.thunkname{fcnNum}='voiduint8Thunk';fcns.name{fcnNum}='DLLSetContinuousMeasurement'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
%  char * DLLConvertErrorCodeToMsg ( es_status_codes status ); 
fcns.thunkname{fcnNum}='cstringes_status_codesThunk';fcns.name{fcnNum}='DLLConvertErrorCodeToMsg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'es_status_codes'};fcnNum=fcnNum+1;
%  void DLLFillUserBufferWithDummyData (); 
fcns.thunkname{fcnNum}='voidThunk';fcns.name{fcnNum}='DLLFillUserBufferWithDummyData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  es_status_codes DLLWaitForMeasureDone (); 
fcns.thunkname{fcnNum}='es_status_codesThunk';fcns.name{fcnNum}='DLLWaitForMeasureDone'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  es_status_codes DLLWaitForBlockDone (); 
fcns.thunkname{fcnNum}='es_status_codesThunk';fcns.name{fcnNum}='DLLWaitForBlockDone'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  es_status_codes DLLGetMeasureOn ( uint32_t drvno , uint8_t * measureOn ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtrThunk';fcns.name{fcnNum}='DLLGetMeasureOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetMeasureOn_multipleBoards ( uint8_t * measureOn0 , uint8_t * measureOn1 , uint8_t * measureOn2 , uint8_t * measureOn3 , uint8_t * measureOn4 ); 
fcns.thunkname{fcnNum}='es_status_codesvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLGetMeasureOn_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
%  void DLLGetCurrentScanNumber ( uint32_t drvno , int64_t * sample , int64_t * block ); 
fcns.thunkname{fcnNum}='voiduint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLGetCurrentScanNumber'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint32', 'int64Ptr', 'int64Ptr'};fcnNum=fcnNum+1;
%  void DLLGetCurrentScanNumber_multipleBoards ( int64_t * sample0 , int64_t * block0 , int64_t * sample1 , int64_t * block1 , int64_t * sample2 , int64_t * block2 , int64_t * sample3 , int64_t * block3 , int64_t * sample4 , int64_t * block4 ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLGetCurrentScanNumber_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int64Ptr', 'int64Ptr', 'int64Ptr', 'int64Ptr', 'int64Ptr', 'int64Ptr', 'int64Ptr', 'int64Ptr', 'int64Ptr', 'int64Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLReadScanFrequencyBit ( uint32_t drvno , uint8_t * scanFrequencyTooHigh ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtrThunk';fcns.name{fcnNum}='DLLReadScanFrequencyBit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLReadScanFrequencyBit_multipleBoards ( uint8_t * scanFrequencyTooHigh0 , uint8_t * scanFrequencyTooHigh1 , uint8_t * scanFrequencyTooHigh2 , uint8_t * scanFrequencyTooHigh3 , uint8_t * scanFrequencyTooHigh4 ); 
fcns.thunkname{fcnNum}='es_status_codesvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLReadScanFrequencyBit_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLResetScanFrequencyBit ( uint32_t drvno ); 
fcns.thunkname{fcnNum}='es_status_codesuint32Thunk';fcns.name{fcnNum}='DLLResetScanFrequencyBit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  es_status_codes DLLResetScanFrequencyBit_multipleBoards (); 
fcns.thunkname{fcnNum}='es_status_codesThunk';fcns.name{fcnNum}='DLLResetScanFrequencyBit_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  es_status_codes DLLReadBlockFrequencyBit ( uint32_t drvno , uint8_t * blockFrequencyTooHigh ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtrThunk';fcns.name{fcnNum}='DLLReadBlockFrequencyBit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLReadBlockFrequencyBit_multipleBoards ( uint8_t * blockFrequencyTooHigh0 , uint8_t * blockFrequencyTooHigh1 , uint8_t * blockFrequencyTooHigh2 , uint8_t * blockFrequencyTooHigh3 , uint8_t * blockFrequencyTooHigh4 ); 
fcns.thunkname{fcnNum}='es_status_codesvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLReadBlockFrequencyBit_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLResetBlockFrequencyBit ( uint32_t drvno ); 
fcns.thunkname{fcnNum}='es_status_codesuint32Thunk';fcns.name{fcnNum}='DLLResetBlockFrequencyBit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  es_status_codes DLLResetBlockFrequencyBit_multipleBoards (); 
fcns.thunkname{fcnNum}='es_status_codesThunk';fcns.name{fcnNum}='DLLResetBlockFrequencyBit_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  es_status_codes DLLGetCameraStatusOverTemp ( uint32_t drvno , uint32_t sample , uint32_t block , uint16_t camera_pos , uint8_t * overTemp ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint32uint32uint16voidPtrThunk';fcns.name{fcnNum}='DLLGetCameraStatusOverTemp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'uint16', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetCameraStatusOverTemp_multipleBoards ( uint32_t sample , uint32_t block , uint16_t camera_pos , uint8_t * overTemp1 , uint8_t * overTemp2 , uint8_t * overTemp3 , uint8_t * overTemp4 , uint8_t * overTemp5 ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint32uint16voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLGetCameraStatusOverTemp_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint16', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetCameraStatusTempGood ( uint32_t drvno , uint32_t sample , uint32_t block , uint16_t camera_pos , uint8_t * tempGood ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint32uint32uint16voidPtrThunk';fcns.name{fcnNum}='DLLGetCameraStatusTempGood'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'uint16', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetCameraStatusTempGood_multipleBoards ( uint32_t sample , uint32_t block , uint16_t camera_pos , uint8_t * tempGood1 , uint8_t * tempGood2 , uint8_t * tempGood3 , uint8_t * tempGood4 , uint8_t * tempGood5 ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint32uint16voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLGetCameraStatusTempGood_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint16', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLFindCam ( uint32_t drvno ); 
fcns.thunkname{fcnNum}='es_status_codesuint32Thunk';fcns.name{fcnNum}='DLLFindCam'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  es_status_codes DLLFindCam_multipleBoards ( uint8_t * cameraFound0 , uint8_t * cameraFound1 , uint8_t * cameraFound2 , uint8_t * cameraFound3 , uint8_t * cameraFound4 ); 
fcns.thunkname{fcnNum}='es_status_codesvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLFindCam_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetBlockOn ( uint32_t drvno , uint8_t * blockOn ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtrThunk';fcns.name{fcnNum}='DLLGetBlockOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetBlockOn_multipleBoards ( uint8_t * blockOn0 , uint8_t * blockOn1 , uint8_t * blockOn2 , uint8_t * blockOn3 , uint8_t * blockOn4 ); 
fcns.thunkname{fcnNum}='es_status_codesvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLGetBlockOn_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLDumpS0Registers ( uint32_t drvno , char ** stringPtr ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtrThunk';fcns.name{fcnNum}='DLLDumpS0Registers'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'stringPtrPtr'};fcnNum=fcnNum+1;
%  es_status_codes DLLDumpHumanReadableS0Registers ( uint32_t drvno , char ** stringPtr ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtrThunk';fcns.name{fcnNum}='DLLDumpHumanReadableS0Registers'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'stringPtrPtr'};fcnNum=fcnNum+1;
%  es_status_codes DLLDumpDmaRegisters ( uint32_t drvno , char ** stringPtr ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtrThunk';fcns.name{fcnNum}='DLLDumpDmaRegisters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'stringPtrPtr'};fcnNum=fcnNum+1;
%  es_status_codes DLLDumpTlpRegisters ( uint32_t drvno , char ** stringPtr ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtrThunk';fcns.name{fcnNum}='DLLDumpTlpRegisters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'stringPtrPtr'};fcnNum=fcnNum+1;
%  es_status_codes DLLDumpMeasurementSettings ( char ** stringPtr ); 
fcns.thunkname{fcnNum}='es_status_codesvoidPtrThunk';fcns.name{fcnNum}='DLLDumpMeasurementSettings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'stringPtrPtr'};fcnNum=fcnNum+1;
%  es_status_codes DLLDumpCameraSettings ( uint32_t drvno , char ** stringPtr ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtrThunk';fcns.name{fcnNum}='DLLDumpCameraSettings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'stringPtrPtr'};fcnNum=fcnNum+1;
%  es_status_codes DLLDumpPciRegisters ( uint32_t drvno , char ** stringPtr ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtrThunk';fcns.name{fcnNum}='DLLDumpPciRegisters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'stringPtrPtr'};fcnNum=fcnNum+1;
%  es_status_codes DLLAboutDrv ( uint32_t drvno , char ** stringPtr ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtrThunk';fcns.name{fcnNum}='DLLAboutDrv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'stringPtrPtr'};fcnNum=fcnNum+1;
%  es_status_codes DLLAboutGPX ( uint32_t drvno , char ** stringPtr ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtrThunk';fcns.name{fcnNum}='DLLAboutGPX'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'stringPtrPtr'};fcnNum=fcnNum+1;
%  void DLLGetVerifiedDataDialog ( struct verify_data_parameter * vd , char ** resultString ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLGetVerifiedDataDialog'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'verify_data_parameterPtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
%  uint8_t DLLGetIsRunning (); 
fcns.thunkname{fcnNum}='uint8Thunk';fcns.name{fcnNum}='DLLGetIsRunning'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  es_status_codes DLLGetBlockIndex ( uint32_t drvno , uint32_t sample , uint32_t block , uint16_t camera_pos , uint32_t * blockIndex ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint32uint32uint16voidPtrThunk';fcns.name{fcnNum}='DLLGetBlockIndex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'uint16', 'uint32Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetScanIndex ( uint32_t drvno , uint32_t sample , uint32_t block , uint16_t camera_pos , uint32_t * scanIndex ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint32uint32uint16voidPtrThunk';fcns.name{fcnNum}='DLLGetScanIndex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'uint16', 'uint32Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetS1State ( uint32_t drvno , uint32_t sample , uint32_t block , uint16_t camera_pos , uint8_t * state ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint32uint32uint16voidPtrThunk';fcns.name{fcnNum}='DLLGetS1State'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'uint16', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetS2State ( uint32_t drvno , uint32_t sample , uint32_t block , uint16_t camera_pos , uint8_t * state ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint32uint32uint16voidPtrThunk';fcns.name{fcnNum}='DLLGetS2State'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'uint16', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetImpactSignal1 ( uint32_t drvno , uint32_t sample , uint32_t block , uint16_t camera_pos , uint32_t * impactSignal ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint32uint32uint16voidPtrThunk';fcns.name{fcnNum}='DLLGetImpactSignal1'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'uint16', 'uint32Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetImpactSignal2 ( uint32_t drvno , uint32_t sample , uint32_t block , uint16_t camera_pos , uint32_t * impactSignal ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint32uint32uint16voidPtrThunk';fcns.name{fcnNum}='DLLGetImpactSignal2'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'uint16', 'uint32Ptr'};fcnNum=fcnNum+1;
%  uint32_t DLLGetVirtualCamcnt ( uint32_t drvno ); 
fcns.thunkname{fcnNum}='uint32uint32Thunk';fcns.name{fcnNum}='DLLGetVirtualCamcnt'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  uint8_t DLLGetTestModeOn (); 
fcns.thunkname{fcnNum}='uint8Thunk';fcns.name{fcnNum}='DLLGetTestModeOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  es_status_codes DLLOutTrigHigh (); 
fcns.thunkname{fcnNum}='es_status_codesThunk';fcns.name{fcnNum}='DLLOutTrigHigh'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  es_status_codes DLLOutTrigLow (); 
fcns.thunkname{fcnNum}='es_status_codesThunk';fcns.name{fcnNum}='DLLOutTrigLow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  es_status_codes DLLOutTrigPulse ( int64_t PulseWidth ); 
fcns.thunkname{fcnNum}='es_status_codesint64Thunk';fcns.name{fcnNum}='DLLOutTrigPulse'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'int64'};fcnNum=fcnNum+1;
%  es_status_codes DLLOpenShutter (); 
fcns.thunkname{fcnNum}='es_status_codesThunk';fcns.name{fcnNum}='DLLOpenShutter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  es_status_codes DLLCloseShutter (); 
fcns.thunkname{fcnNum}='es_status_codesThunk';fcns.name{fcnNum}='DLLCloseShutter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  es_status_codes DLLSetTemp ( uint8_t level ); 
fcns.thunkname{fcnNum}='es_status_codesuint8Thunk';fcns.name{fcnNum}='DLLSetTemp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
%  es_status_codes DLLSetTORReg ( uint32_t drvno , uint8_t tor ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint8Thunk';fcns.name{fcnNum}='DLLSetTORReg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint8'};fcnNum=fcnNum+1;
%  es_status_codes DLLSetTORReg_multipleBoards ( uint8_t tor ); 
fcns.thunkname{fcnNum}='es_status_codesuint8Thunk';fcns.name{fcnNum}='DLLSetTORReg_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
%  es_status_codes DLLDAC8568_setAllOutputs ( uint32_t drvno , uint8_t location , uint8_t cameraPosition , uint32_t * output , uint8_t reorder_channels ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint8uint8voidPtruint8Thunk';fcns.name{fcnNum}='DLLDAC8568_setAllOutputs'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint8', 'uint8', 'uint32Ptr', 'uint8'};fcnNum=fcnNum+1;
%  es_status_codes DLLDAC8568_setAllOutputs_multipleBoards ( uint8_t location , uint8_t cameraPosition , uint32_t * output0 , uint32_t * output1 , uint32_t * output2 , uint32_t * output3 , uint32_t * output4 , uint8_t reorder_channels ); 
fcns.thunkname{fcnNum}='es_status_codesuint8uint8voidPtrvoidPtrvoidPtrvoidPtrvoidPtruint8Thunk';fcns.name{fcnNum}='DLLDAC8568_setAllOutputs_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint8', 'uint8', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint8'};fcnNum=fcnNum+1;
%  es_status_codes DLLIOCtrl_setAllOutputs ( uint32_t * width_in_5ns , uint32_t * delay_in_5ns ); 
fcns.thunkname{fcnNum}='es_status_codesvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLIOCtrl_setAllOutputs'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLIOCtrl_setT0 ( uint32_t drvno , uint32_t period_in_10ns ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint32Thunk';fcns.name{fcnNum}='DLLIOCtrl_setT0'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32'};fcnNum=fcnNum+1;
%  es_status_codes DLLIOCtrl_setT0_multipleBoards ( uint32_t period_in_10ns ); 
fcns.thunkname{fcnNum}='es_status_codesuint32Thunk';fcns.name{fcnNum}='DLLIOCtrl_setT0_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  es_status_codes DLLIOCtrl_setOutput ( uint32_t drvno , uint32_t number , uint16_t width_in_5ns , uint16_t delay_in_5ns ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint32uint16uint16Thunk';fcns.name{fcnNum}='DLLIOCtrl_setOutput'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint16', 'uint16'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetIsTdc ( uint32_t drvno , uint8_t * isTdc ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtrThunk';fcns.name{fcnNum}='DLLGetIsTdc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetIsTdc_multipleBoards ( uint8_t * isTdc0 , uint8_t * isTdc1 , uint8_t * isTdc2 , uint8_t * isTdc3 , uint8_t * isTdc4 ); 
fcns.thunkname{fcnNum}='es_status_codesvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLGetIsTdc_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetIsDsc ( uint32_t drvno , uint8_t * isDsc ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtrThunk';fcns.name{fcnNum}='DLLGetIsDsc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetIsDsc_multipleBoards ( uint8_t * isDsc0 , uint8_t * isDsc1 , uint8_t * isDsc2 , uint8_t * isDsc3 , uint8_t * isDsc4 ); 
fcns.thunkname{fcnNum}='es_status_codesvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLGetIsDsc_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLResetDSC ( uint32_t drvno , uint8_t DSCNumber ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint8Thunk';fcns.name{fcnNum}='DLLResetDSC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint8'};fcnNum=fcnNum+1;
%  es_status_codes DLLResetDSC_multipleBoards ( uint8_t DSCNumber ); 
fcns.thunkname{fcnNum}='es_status_codesuint8Thunk';fcns.name{fcnNum}='DLLResetDSC_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
%  es_status_codes DLLSetDIRDSC ( uint32_t drvno , uint8_t DSCNumber , uint8_t dir ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint8uint8Thunk';fcns.name{fcnNum}='DLLSetDIRDSC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint8', 'uint8'};fcnNum=fcnNum+1;
%  es_status_codes DLLSetDIRDSC_multipleBoards ( uint8_t DSCNumber , uint8_t dir ); 
fcns.thunkname{fcnNum}='es_status_codesuint8uint8Thunk';fcns.name{fcnNum}='DLLSetDIRDSC_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint8', 'uint8'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetDSC ( uint32_t drvno , uint8_t DSCNumber , uint32_t * ADSC , uint32_t * LDSC ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint8voidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLGetDSC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint8', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetDSC_multipleBoards ( uint8_t DSCNumber , uint32_t * ADSC0 , uint32_t * LDSC0 , uint32_t * ADSC1 , uint32_t * LDSC1 , uint32_t * ADSC2 , uint32_t * LDSC2 , uint32_t * ADSC3 , uint32_t * LDSC3 , uint32_t * ADSC4 , uint32_t * LDSC4 ); 
fcns.thunkname{fcnNum}='es_status_codesuint8voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLGetDSC_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint8', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLInitGPX ( uint32_t delay ); 
fcns.thunkname{fcnNum}='es_status_codesuint32Thunk';fcns.name{fcnNum}='DLLInitGPX'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetAllSpecialPixelInformation ( uint32_t drvno , uint32_t sample , uint32_t block , uint16_t camera_pos , struct special_pixels * sp ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint32uint32uint16voidPtrThunk';fcns.name{fcnNum}='DLLGetAllSpecialPixelInformation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'uint16', 'special_pixelsPtr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetAllSpecialPixelInformation_multipleBoards ( uint32_t sample , uint32_t block , uint16_t camera_pos , struct special_pixels * sp0 , struct special_pixels * sp1 , struct special_pixels * sp2 , struct special_pixels * sp3 , struct special_pixels * sp4 ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint32uint16voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLGetAllSpecialPixelInformation_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint16', 'special_pixelsPtr', 'special_pixelsPtr', 'special_pixelsPtr', 'special_pixelsPtr', 'special_pixelsPtr'};fcnNum=fcnNum+1;
%  es_status_codes DLLSetSTimer ( uint32_t drvno , uint32_t stime_in_microseconds ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint32Thunk';fcns.name{fcnNum}='DLLSetSTimer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32'};fcnNum=fcnNum+1;
%  es_status_codes DLLSetBTimer ( uint32_t drvno , uint32_t btime_in_microseconds ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint32Thunk';fcns.name{fcnNum}='DLLSetBTimer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetXckLength ( uint32_t drvno , uint32_t * xckLengthIn10ns ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtrThunk';fcns.name{fcnNum}='DLLGetXckLength'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetXckPeriod ( uint32_t drvno , uint32_t * xckPeriodIn10ns ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtrThunk';fcns.name{fcnNum}='DLLGetXckPeriod'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetBonLength ( uint32_t drvno , uint32_t * bonLengthIn10ns ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtrThunk';fcns.name{fcnNum}='DLLGetBonLength'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetBonPeriod ( uint32_t drvno , uint32_t * bonPeriodIn10ns ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtrThunk';fcns.name{fcnNum}='DLLGetBonPeriod'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetXckLength_multipleBoards ( uint32_t * xckLengthIn10ns0 , uint32_t * xckLengthIn10ns1 , uint32_t * xckLengthIn10ns2 , uint32_t * xckLengthIn10ns3 , uint32_t * xckLengthIn10ns4 ); 
fcns.thunkname{fcnNum}='es_status_codesvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLGetXckLength_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetXckPeriod_multipleBoards ( uint32_t * xckPeriodIn10ns0 , uint32_t * xckPeriodIn10ns1 , uint32_t * xckPeriodIn10ns2 , uint32_t * xckPeriodIn10ns3 , uint32_t * xckPeriodIn10ns4 ); 
fcns.thunkname{fcnNum}='es_status_codesvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLGetXckPeriod_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetBonLength_multipleBoards ( uint32_t * bonLengthIn10ns0 , uint32_t * bonLengthIn10ns1 , uint32_t * bonLengthIn10ns2 , uint32_t * bonLengthIn10ns3 , uint32_t * bonLengthIn10ns4 ); 
fcns.thunkname{fcnNum}='es_status_codesvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLGetBonLength_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetBonPeriod_multipleBoards ( uint32_t * bonPeriodIn10ns0 , uint32_t * bonPeriodIn10ns1 , uint32_t * bonPeriodIn10ns2 , uint32_t * bonPeriodIn10ns3 , uint32_t * bonPeriodIn10ns4 ); 
fcns.thunkname{fcnNum}='es_status_codesvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLGetBonPeriod_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetScanTriggerDetected ( uint32_t drvno , uint8_t * detected ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtrThunk';fcns.name{fcnNum}='DLLGetScanTriggerDetected'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetBlockTriggerDetected ( uint32_t drvno , uint8_t * detected ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtrThunk';fcns.name{fcnNum}='DLLGetBlockTriggerDetected'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLResetScanTriggerDetected ( uint32_t drvno ); 
fcns.thunkname{fcnNum}='es_status_codesuint32Thunk';fcns.name{fcnNum}='DLLResetScanTriggerDetected'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  es_status_codes DLLResetBlockTriggerDetected ( uint32_t drvno ); 
fcns.thunkname{fcnNum}='es_status_codesuint32Thunk';fcns.name{fcnNum}='DLLResetBlockTriggerDetected'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetScanTriggerDetected_multipleBoards ( uint8_t * detected0 , uint8_t * detected1 , uint8_t * detected2 , uint8_t * detected3 , uint8_t * detected4 ); 
fcns.thunkname{fcnNum}='es_status_codesvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLGetScanTriggerDetected_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLGetBlockTriggerDetected_multipleBoards ( uint8_t * detected0 , uint8_t * detected1 , uint8_t * detected2 , uint8_t * detected3 , uint8_t * detected4 ); 
fcns.thunkname{fcnNum}='es_status_codesvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLGetBlockTriggerDetected_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLResetScanTriggerDetected_multipleBoards (); 
fcns.thunkname{fcnNum}='es_status_codesThunk';fcns.name{fcnNum}='DLLResetScanTriggerDetected_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  es_status_codes DLLResetBlockTriggerDetected_multipleBoards (); 
fcns.thunkname{fcnNum}='es_status_codesThunk';fcns.name{fcnNum}='DLLResetBlockTriggerDetected_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  es_status_codes DLLDAC8568_setOutput ( uint32_t drvno , uint8_t location , uint8_t cameraPosition , uint8_t channel , uint16_t output ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint8uint8uint8uint16Thunk';fcns.name{fcnNum}='DLLDAC8568_setOutput'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint8', 'uint8', 'uint8', 'uint16'};fcnNum=fcnNum+1;
%  es_status_codes DLLCheckFifoValid ( uint32_t drvno , uint8_t * valid ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtrThunk';fcns.name{fcnNum}='DLLCheckFifoValid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLCheckFifoOverflow ( uint32_t drvno , uint8_t * overflow ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtrThunk';fcns.name{fcnNum}='DLLCheckFifoOverflow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLCheckFifoEmpty ( uint32_t drvno , uint8_t * empty ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtrThunk';fcns.name{fcnNum}='DLLCheckFifoEmpty'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLCheckFifoFull ( uint32_t drvno , uint8_t * full ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtrThunk';fcns.name{fcnNum}='DLLCheckFifoFull'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint8Ptr'};fcnNum=fcnNum+1;
%  void DLLSetMeasureStartHook ( void (* hook )()); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DLLSetMeasureStartHook'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'FcnPtr'};fcnNum=fcnNum+1;
%  void DLLSetMeasureDoneHook ( void (* hook )()); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DLLSetMeasureDoneHook'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'FcnPtr'};fcnNum=fcnNum+1;
%  void DLLSetBlockStartHook ( void (* hook )()); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DLLSetBlockStartHook'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'FcnPtr'};fcnNum=fcnNum+1;
%  void DLLSetBlockDoneHook ( void (* hook )()); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DLLSetBlockDoneHook'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'FcnPtr'};fcnNum=fcnNum+1;
%  void DLLSetAllBlocksDoneHook ( void (* hook )()); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DLLSetAllBlocksDoneHook'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'FcnPtr'};fcnNum=fcnNum+1;
%  es_status_codes DLLreadRegisterS0_8 ( uint32_t drvno , uint8_t * data , uint32_t address ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtruint32Thunk';fcns.name{fcnNum}='DLLreadRegisterS0_8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint8Ptr', 'uint32'};fcnNum=fcnNum+1;
%  es_status_codes DLLreadRegisterS0_8_multipleBoards ( uint8_t * data0 , uint8_t * data1 , uint8_t * data2 , uint8_t * data3 , uint8_t * data4 , uint32_t address ); 
fcns.thunkname{fcnNum}='es_status_codesvoidPtrvoidPtrvoidPtrvoidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='DLLreadRegisterS0_8_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint32'};fcnNum=fcnNum+1;
%  es_status_codes DLLwriteRegisterS0_8 ( uint8_t data , uint32_t address ); 
fcns.thunkname{fcnNum}='es_status_codesuint8uint32Thunk';fcns.name{fcnNum}='DLLwriteRegisterS0_8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint8', 'uint32'};fcnNum=fcnNum+1;
%  es_status_codes DLLreadRegisterS0_32 ( uint32_t drvno , uint32_t * data , uint32_t address ); 
fcns.thunkname{fcnNum}='es_status_codesuint32voidPtruint32Thunk';fcns.name{fcnNum}='DLLreadRegisterS0_32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32Ptr', 'uint32'};fcnNum=fcnNum+1;
%  es_status_codes DLLreadRegisterS0_32_multipleBoards ( uint32_t * data0 , uint32_t * data1 , uint32_t * data2 , uint32_t * data3 , uint32_t * data4 , uint32_t address ); 
fcns.thunkname{fcnNum}='es_status_codesvoidPtrvoidPtrvoidPtrvoidPtrvoidPtruint32Thunk';fcns.name{fcnNum}='DLLreadRegisterS0_32_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32'};fcnNum=fcnNum+1;
%  es_status_codes DLLwriteRegisterS0_32 ( uint32_t data , uint32_t address ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint32Thunk';fcns.name{fcnNum}='DLLwriteRegisterS0_32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32'};fcnNum=fcnNum+1;
%  es_status_codes DLLsetBitS0_32 ( uint32_t bitnumber , uint16_t address ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint16Thunk';fcns.name{fcnNum}='DLLsetBitS0_32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint16'};fcnNum=fcnNum+1;
%  es_status_codes DLLresetBitS0_32 ( uint32_t bitnumber , uint16_t address ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint16Thunk';fcns.name{fcnNum}='DLLresetBitS0_32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint16'};fcnNum=fcnNum+1;
%  es_status_codes DLLReadBitS0_32 ( uint32_t drvno , uint16_t address , uint8_t bitnumber , uint8_t * isBitHigh ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint16uint8voidPtrThunk';fcns.name{fcnNum}='DLLReadBitS0_32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint16', 'uint8', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLReadBitS0_32_multipleBoards ( uint16_t address , uint8_t bitnumber , uint8_t * isBitHigh0 , uint8_t * isBitHigh1 , uint8_t * isBitHigh2 , uint8_t * isBitHigh3 , uint8_t * isBitHigh4 ); 
fcns.thunkname{fcnNum}='es_status_codesuint16uint8voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLReadBitS0_32_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint16', 'uint8', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLReadBitS0_8 ( uint32_t drvno , uint16_t address , uint8_t bitnumber , uint8_t * isBitHigh ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint16uint8voidPtrThunk';fcns.name{fcnNum}='DLLReadBitS0_8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint16', 'uint8', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLReadBitS0_8_multipleBoards ( uint16_t address , uint8_t bitnumber , uint8_t * isBitHigh0 , uint8_t * isBitHigh1 , uint8_t * isBitHigh2 , uint8_t * isBitHigh3 , uint8_t * isBitHigh4 ); 
fcns.thunkname{fcnNum}='es_status_codesuint16uint8voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLReadBitS0_8_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint16', 'uint8', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
%  es_status_codes DLLCalcTrms ( uint32_t drvno , uint32_t firstSample , uint32_t lastSample , uint32_t TRMS_pixel , uint16_t CAMpos , double * mwf , double * trms ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint32uint32uint32uint16voidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLCalcTrms'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'uint32', 'uint16', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
%  es_status_codes DLLCalcTrms_multipleBoards ( uint32_t firstSample , uint32_t lastSample , uint32_t TRMS_pixel , uint16_t CAMpos , double * mwf0 , double * trms0 , double * mwf1 , double * trms1 , double * mwf2 , double * trms2 , double * mwf3 , double * trms3 , double * mwf4 , double * trms4 ); 
fcns.thunkname{fcnNum}='es_status_codesuint32uint32uint32uint16voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DLLCalcTrms_multipleBoards'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'uint16', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
%  void DLLErrMsgBoxOn (); 
fcns.thunkname{fcnNum}='voidThunk';fcns.name{fcnNum}='DLLErrMsgBoxOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  void DLLErrMsgBoxOff (); 
fcns.thunkname{fcnNum}='voidThunk';fcns.name{fcnNum}='DLLErrMsgBoxOff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  es_status_codes DLLAbout (); 
fcns.thunkname{fcnNum}='es_status_codesThunk';fcns.name{fcnNum}='DLLAbout'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  void DLLErrorMsg ( char ErrMsg [ 20 ]); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DLLErrorMsg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int8Ptr'};fcnNum=fcnNum+1;
%  void DLLStart2dViewer ( uint32_t drvno , uint32_t block , uint16_t camera , uint16_t pixel , uint32_t nos ); 
fcns.thunkname{fcnNum}='voiduint32uint32uint16uint16uint32Thunk';fcns.name{fcnNum}='DLLStart2dViewer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint16', 'uint16', 'uint32'};fcnNum=fcnNum+1;
%  void DLLShowNewBitmap ( uint32_t drvno , uint32_t block , uint16_t camera , uint16_t pixel , uint32_t nos ); 
fcns.thunkname{fcnNum}='voiduint32uint32uint16uint16uint32Thunk';fcns.name{fcnNum}='DLLShowNewBitmap'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint16', 'uint16', 'uint32'};fcnNum=fcnNum+1;
%  void DLLDeinit2dViewer (); 
fcns.thunkname{fcnNum}='voidThunk';fcns.name{fcnNum}='DLLDeinit2dViewer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  void DLLSetGammaValue ( uint16_t white , uint16_t black ); 
fcns.thunkname{fcnNum}='voiduint16uint16Thunk';fcns.name{fcnNum}='DLLSetGammaValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint16', 'uint16'};fcnNum=fcnNum+1;
%  uint16_t DLLGetGammaWhite (); 
fcns.thunkname{fcnNum}='uint16Thunk';fcns.name{fcnNum}='DLLGetGammaWhite'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  uint16_t DLLGetGammaBlack (); 
fcns.thunkname{fcnNum}='uint16Thunk';fcns.name{fcnNum}='DLLGetGammaBlack'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  es_status_codes DLLExportMeasurementHDF5 ( const char * path , char * filename ); 
fcns.thunkname{fcnNum}='es_status_codescstringcstringThunk';fcns.name{fcnNum}='DLLExportMeasurementHDF5'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='es_status_codes'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
structs.camera_settings.members=struct('use_software_polling', 'uint32', 'sti_mode', 'uint32', 'bti_mode', 'uint32', 'stime_in_microsec', 'uint32', 'btime_in_microsec', 'uint32', 'sdat_in_10ns', 'uint32', 'bdat_in_10ns', 'uint32', 'sslope', 'uint32', 'bslope', 'uint32', 'xckdelay_in_10ns', 'uint32', 'sec_in_10ns', 'uint32', 'trigger_mode_integrator', 'uint32', 'sensor_type', 'uint32', 'camera_system', 'uint32', 'camcnt', 'uint32', 'pixel', 'uint32', 'is_fft_legacy', 'uint32', 'led_off', 'uint32', 'sensor_gain', 'uint32', 'adc_gain', 'uint32', 'temp_level', 'uint32', 'bticnt', 'uint32', 'gpx_offset', 'uint32', 'fft_lines', 'uint32', 'vfreq', 'uint32', 'fft_mode', 'uint32', 'lines_binning', 'uint32', 'number_of_regions', 'uint32', 's1s2_read_delay_in_10ns', 'uint32', 'region_size', 'uint32#8', 'dac_output', 'uint32#64', 'tor', 'uint32', 'adc_mode', 'uint32', 'adc_custom_pattern', 'uint32', 'bec_in_10ns', 'uint32', 'channel_select', 'uint32', 'ioctrl_impact_start_pixel', 'uint32', 'ioctrl_output_width_in_5ns', 'uint32#8', 'ioctrl_output_delay_in_5ns', 'uint32#8', 'ioctrl_T0_period_in_10ns', 'uint32', 'dma_buffer_size_in_scans', 'uint32', 'tocnt', 'uint32', 'sticnt', 'uint32', 'sensor_reset_or_hsir_ec', 'uint32', 'write_to_disc', 'uint32', 'file_path', 'int8#256', 'shift_s1s2_to_next_scan', 'uint32', 'is_cooled_camera_legacy_mode', 'uint32', 'bnc_out', 'uint32');
structs.measurement_settings.members=struct('board_sel', 'uint32', 'nos', 'uint32', 'nob', 'uint32', 'continuous_measurement', 'uint32', 'cont_pause_in_microseconds', 'uint32', 'camera_settings', 'camera_settings#5');
structs.measurement_settings_matlab.members=struct('board_sel', 'uint32', 'nos', 'uint32', 'nob', 'uint32', 'continuous_measurement', 'uint32', 'cont_pause_in_microseconds', 'uint32');
structs.file_header.members=struct('drvno', 'uint32', 'pixel', 'uint32', 'nos', 'uint32', 'nob', 'uint32', 'camcnt', 'uint32', 'measurement_cnt', 'uint64', 'timestamp', 'int8#64', 'filename_full', 'int8#256', 'split_mode', 'uint32');
structs.special_pixels.members=struct('overTemp', 'uint32', 'tempGood', 'uint32', 'blockIndex', 'uint32', 'scanIndex', 'uint32', 'scanIndex2', 'uint32', 's1State', 'uint32', 's2State', 'uint32', 'impactSignal1', 'uint32', 'impactSignal2', 'uint32', 'cameraSystem3001', 'uint32', 'cameraSystem3010', 'uint32', 'cameraSystem3030', 'uint32', 'fpgaVerMajor', 'uint32', 'fpgaVerMinor', 'uint32');
structs.verify_data_parameter.members=struct('filename_full', 'int8#256', 'sample_cnt', 'uint32', 'block_cnt', 'uint32', 'measurement_cnt', 'uint64', 'fh', 'file_header', 'error_cnt', 'uint32', 'last_sample', 'uint32', 'last_block', 'uint32', 'last_sample_before_error', 'uint32', 'last_block_before_error', 'uint32', 'last_measurement_before_error', 'uint64');
enuminfo.es_status_codes=struct('es_no_error',0,'es_device_not_found',1,'es_driver_init_failed',2,'es_debug_init_failed',3,'es_setting_driver_name_failed',4,'es_invalid_pixel_count',5,'es_invalid_driver_number',6,'es_getting_device_info_failed',7,'es_open_device_failed',8,'es_invalid_driver_handle',9,'es_register_read_failed',10,'es_register_write_failed',11,'es_no_space0',12,'es_allocating_memory_failed',13,'es_not_enough_ram',14,'es_parameter_out_of_range',15,'es_unknown_error',16,'es_enabling_interrupts_failed',17,'es_getting_dma_buffer_failed',18,'es_unlocking_dma_failed',19,'es_camera_not_found',20,'es_abortion',21,'es_creating_thread_failed',22,'es_setting_thread_priority_failed',23,'es_already_running',24,'es_disabling_interrupt_failed',25,'es_memory_not_initialized',26,'es_create_file_failed',27,'es_first_measurement_not_done',28,'es_measurement_running',29,'es_invalid_pointer',30);
methodinfo=fcns;